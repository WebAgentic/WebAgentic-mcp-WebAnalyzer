version: '3.8'

services:
  # Redis service for caching and Celery
  redis:
    image: redis:7-alpine
    container_name: web-analyzer-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-changeme}
    networks:
      - web-analyzer-network
    healthcheck:
      test: ["CMD", "redis-cli", "auth", "${REDIS_PASSWORD:-changeme}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Analyzer API Server
  web-analyzer-api:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: web-analyzer-api
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app/src
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-changeme}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-changeme}@redis:6379/2
      - HOST=0.0.0.0
      - PORT=8000
      - SECRET_KEY=${SECRET_KEY}
      - API_KEY=${API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    ports:
      - "8000:8000"
      - "9090:9090"  # Metrics port
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - web-analyzer-network
    command: ["python", "-m", "web_analyzer_mcp.api_server"]

  # Celery Worker
  web-analyzer-worker:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: web-analyzer-worker
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app/src
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-changeme}@redis:6379/0
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-changeme}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-changeme}@redis:6379/2
      - OPENAI_API_KEY=${OPENAI_API_KEY:-}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY:-}
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - web-analyzer-network
    command: ["python", "-m", "web_analyzer_mcp.worker"]

  # Celery Flower (monitoring)
  web-analyzer-flower:
    build:
      context: ..
      dockerfile: Dockerfile
    container_name: web-analyzer-flower
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app/src
      - CELERY_BROKER_URL=redis://:${REDIS_PASSWORD:-changeme}@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:${REDIS_PASSWORD:-changeme}@redis:6379/2
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - web-analyzer-network
    command: ["celery", "flower", "--app=web_analyzer_mcp.worker.celery_app", "--port=5555", "--broker=redis://:${REDIS_PASSWORD:-changeme}@redis:6379/1"]

  # Nginx reverse proxy with SSL
  nginx:
    image: nginx:alpine
    container_name: web-analyzer-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - web-analyzer-api
    networks:
      - web-analyzer-network

networks:
  web-analyzer-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  logs:
    driver: local
  data:
    driver: local