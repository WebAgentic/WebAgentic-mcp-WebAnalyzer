version: '3.8'

services:
  # Redis service for caching and Celery
  redis:
    image: redis:7-alpine
    container_name: mcp-webanalyzer-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - mcp-webanalyzer-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP WebAnalyzer API Server
  mcp-webanalyzer-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-webanalyzer-api
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
      - HOST=0.0.0.0
      - PORT=8000
      - SECRET_KEY=your-secret-key-change-in-production-please
      - API_KEY=your-api-key-please-change-this
    ports:
      - "8080:8000"  # External port 8080 -> Internal port 8000
      - "9090:9090"  # Metrics port
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - mcp-webanalyzer-network
    command: ["python", "-m", "mcp_webanalyzer.api_server"]

  # Celery Worker
  mcp-webanalyzer-worker:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-webanalyzer-worker
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - mcp-webanalyzer-network
    command: ["python", "-m", "mcp_webanalyzer.worker"]

  # Celery Flower (monitoring)
  mcp-webanalyzer-flower:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-webanalyzer-flower
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - CELERY_BROKER_URL=redis://redis:6379/1
      - CELERY_RESULT_BACKEND=redis://redis:6379/2
    ports:
      - "5555:5555"
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - mcp-webanalyzer-network
    command: ["celery", "--broker=redis://redis:6379/1", "flower"]

  # MCP Client (connects to HTTP API)
  mcp-webanalyzer-mcp-client:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mcp-webanalyzer-mcp-client
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - API_BASE_URL=http://mcp-webanalyzer-api:8000
      - API_KEY=your-api-key-please-change-this
    depends_on:
      - mcp-webanalyzer-api
    networks:
      - mcp-webanalyzer-network
    command: ["python", "-m", "mcp_webanalyzer.mcp_client"]
    profiles:
      - with-mcp-client

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: mcp-webanalyzer-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - mcp-webanalyzer-api
    networks:
      - mcp-webanalyzer-network
    profiles:
      - with-nginx

networks:
  mcp-webanalyzer-network:
    driver: bridge

volumes:
  redis_data:
    driver: local
  logs:
    driver: local
  data:
    driver: local